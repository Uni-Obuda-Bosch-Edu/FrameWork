package virtualDataBus;

<<<<<<< HEAD
import PP.*;
=======
import Wheels.Implementation.Wheels;
>>>>>>> 9ef183f1de7fcb143eb36c279704edb0dbcea261
import busInterface.*;
import driverinput.DriverInput;
import engine.*;
import inputHandler.DriverInputHandler;
import inputHandler.InputVisualizer;

public class Container implements Engine_Out, DriverInput_Out, Gearbox_Out, Wheels_Out, Public_In, IPP_Out
{

	public enum ShiftLeverPosition {Parking, Reverse, Neutral, Drive}
	
	public static Container getInstance(){
		if(instance == null)
			instance = new Container();
		return instance;
	}

	public boolean getEngineToggleButtonState() {
		return EngineToggleButtonState;
	}

	public void setEngineToggleButtonState(boolean buttonState) {
		if(buttonState)
			_engine.Connect();
		else
			_engine.Disconnect();
		EngineToggleButtonState = buttonState;
	}

	public double getSteeringWheelSignedPercentage() {
		return SteeringWheelAngle;
	}
	public void setWheelRotationPercent(double steeringWheelAngle) {
		SteeringWheelAngle = steeringWheelAngle;
	}
	
	public double getSteeringWheelMaxAngle() {
		return SteeringWheelMaxAngle;
	}

	public void setSteeringWheelMaxAngle(double steeringWheelMaxAngle) {
		SteeringWheelMaxAngle = steeringWheelMaxAngle;
	}
	public double getBrakePedalPercentage() {
		return BreakPedalPercent;
	}

	public void setBrakePedalPushPercent(double breakPedalAngle) {
		BreakPedalPercent = breakPedalAngle;
	}

	public double getGasPedalPercentage() {
		return GasPedalPercent;
	}

	public void setGasPedalPushPercent(double gasPedalAngle) {
		GasPedalPercent = gasPedalAngle;
	}

	public int getCurrentGear() {
		return CurrentGear;
	}

	public void setCurrentGear(int currentGear) {
		CurrentGear = currentGear;
	}

	public int getMaxGear() {
		return MaxGear;
	}

	public void setMaxGear(int maxGear) {
		MaxGear = maxGear;
	}

	public ShiftLeverPosition getShiftLeverPosition() {
		return ShiftLeverPosition;
	}

	public void setShiftLeverPosition(ShiftLeverPosition shiftLeverPosition) {
		ShiftLeverPosition = shiftLeverPosition;
	}

	public double getGearTorque() {
		return GearTorque;
	}

	public void setGearTorque(double gearTorque) {
		GearTorque = gearTorque;
	}

	public int getGearRevolution() {
		return GearRevolution;
	}

	public void setGearRevolution(int gearRevolution) {
		GearRevolution = gearRevolution;
	}

	public int getGearMode() {
		return GearMode;
	}

	public void setGearMode(int gearMode) {
		GearMode = gearMode;
	}

	public double getEngineTorque() {
		return EngineTorque;
	}

	public void setEngineTorque(double engineTorque) {
		EngineTorque = engineTorque;
	}

	public int getEngineRevolution() {
		return _engineRevolution;
	}

	@Override
	public void setEngineRevolution(int engineRevolution) {
		_engineRevolution = engineRevolution;
	}

	public void setGearMode(int gearMode) {
		GearMode = gearMode;
	}

	@Override
	public double getCenterOfXAxis() {
		return CenterOfXAxis;
	}

	@Override
	public double getCenterOfYAxis() {
		return CenterOfYAxis;
	}

	@Override
	public double getMotionVectorXWithLengthAsSpeedInKm() {
		return MotionVectorXWithLengthAsSpeedInKm;
	}

	@Override
	public double getMotionVectorYWithLengthAsSpeedInKm() {
		return MotionVectorYWithLengthAsSpeedInKm;
	}

<<<<<<< HEAD
	public void setMotionVectorYWithLengthAsSpeedInKm(double motionVectorYWithLengthAsSpeedInKm) {
		MotionVectorYWithLengthAsSpeedInKm = motionVectorYWithLengthAsSpeedInKm;
	}

	@Override
	public void setParkingFoundOnLeft(boolean val) {
		_parkingFoundOnLeft = val;
	}

	@Override
	public void setParkingFoundOnRight(boolean val) {
		_parkingFoundOnRight = val;
	}
	
	public void setWheelTorqueInNewton(double newTorque) {
		WheelTorqueInNewton = newTorque;
	}
	
	public void setMaximumWheelTorqueInNewton(double newTorque) {
		MaximumTorqueInNewton = newTorque;
	}
	
	public void setMaximumBrakeTorqueInNewton(double newTorque) {
		MaximumBrakeTorqueInNewton = newTorque;
	}
	
	public void setFrictionalCoefficientOfBrakes(double coefficient) {
		FrictionalCoefficientOfBrakes = coefficient;
	}
	
	public void setDiameterOfDriveAxesInMeters(double diameter) {
		DiameterOfDriveAxesInMeters = diameter;
	}
	
	public void setLengthOfAxesInMeters(double length) {
		LengthOfAxesInMeters = length;
	}
	
	public void setDistanceBetweenAxesInMeters(double distance) {
		DistanceBetweenAxesInMeters = distance;
	}
	
	public void setDiameterOfWheelsInMeters(double diameter) {
		DiameterOfWheelsInMeters = diameter;
	}
	
	public void setWidthOfWheelsInMeters(double width) {
		WidthOfWheelsInMeters = width;
	}
	
	public void setDriveWheelStateZeroBasedDegree(double degree) {
		DriveWheelStateZeroBasedDegree = degree;
	}
	
	public void setMaximumDriveWheelStateZeroBasedDegree(double degree) {
		MaximumDriveWheelStateZeroBasedDegree = degree;		
=======
	@Override
	public void setCenterOfXAxis(double XPos) {
		CenterOfXAxis = XPos;
>>>>>>> 9ef183f1de7fcb143eb36c279704edb0dbcea261
	}

	@Override
	public void setCenterOfYAxis(double YPos) {
		CenterOfYAxis = YPos;
	}

	@Override
	public void setMotionVectorXWithLengthAsSpeedInKm(double XSpeedVector) {
		MotionVectorXWithLengthAsSpeedInKm = XSpeedVector;
	}

	@Override
	public void setMotionVectorYWithLengthAsSpeedInKm(double YSpeedVector) {
		MotionVectorYWithLengthAsSpeedInKm = YSpeedVector;
	}

	@Override
	public int getIndexState() {
		return _indexState;
	}

    @Override
    public boolean getPPActivated() {
        return _ppActivated;
    }

    /*PP*/
	private Integration _integration;
	private boolean _parkingFoundOnLeft;
	private boolean _parkingFoundOnRight;
	private int _indexState;
	private boolean _ppActivated;

	/*DriverInput*/
	private DriverInput _driverInput;
	private DriverInputHandler _driverInputHandler;
	private InputVisualizer _inputVisualizer;
	
	private double SteeringWheelAngle;
	private double SteeringWheelMaxAngle;
	private double BreakPedalPercent;
	private double GasPedalPercent;
	private int CurrentGear;
	private int MaxGear;
	private ShiftLeverPosition ShiftLeverPosition;
	private boolean EngineToggleButtonState;
	
	/*Gearbox*/
	private double GearTorque;
	private int GearRevolution;
	private int GearMode;
	
	/*Engine*/
	private Engine _engine;
	private int _engineRevolution;

	/*Wheels*/
	private double CenterOfXAxis;
	private double CenterOfYAxis;
	private double MotionVectorXWithLengthAsSpeedInKm;
	private double MotionVectorYWithLengthAsSpeedInKm;
	
	private Wheels Wheels;
	
	
	private static Container instance = null;
	
	
	private Container(){
		//do not instantiate; do not subclass;
<<<<<<< HEAD
		_engine = new Engine(this,new EngineBlock(this,this),EngineBlock.BUS_SAMPLING_TIME_MS);
        _integration = new Integration(this,Integration.BUS_SAMPLING_TIME_MS,new PP());
        
        _driverInput = new DriverInput(this, this);
        _inputVisualizer = new InputVisualizer(this);
        _driverInputHandler = new DriverInputHandler(_driverInput, _inputVisualizer);
=======
		Wheels = new Wheels(10, this, this);
>>>>>>> 9ef183f1de7fcb143eb36c279704edb0dbcea261
	}

	


}
