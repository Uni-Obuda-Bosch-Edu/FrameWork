package unitTests.engine;

import static org.junit.Assert.*;
import javafx.util.Pair;
import org.junit.Assert;
import org.junit.Test;
import virtualDataBus.Container;
import engine.*;

import java.util.ArrayList;

public class engineTest {

    private EngineBlock _engineBlock;
    private Container _bus;
    private ArrayList<Double> _expectedResult;

    @org.junit.Before
    public void setUp() throws Exception {
        _bus = Container.getInstance();
        _engineBlock = new EngineBlock(_bus, _bus);

        //Generated by a tool from Physical model of engine.xlsx
        _expectedResult = new ArrayList<Double>();
        _expectedResult.add(510.833);
        _expectedResult.add(521.901);
        _expectedResult.add(533.209);
        _expectedResult.add(544.762);
        _expectedResult.add(556.565);
        _expectedResult.add(568.624);
        _expectedResult.add(580.944);
        _expectedResult.add(593.532);
        _expectedResult.add(606.391);
        _expectedResult.add(619.530);
        _expectedResult.add(632.953);
        _expectedResult.add(646.667);
        _expectedResult.add(660.678);
        _expectedResult.add(674.993);
        _expectedResult.add(689.618);
        _expectedResult.add(704.559);
        _expectedResult.add(719.825);
        _expectedResult.add(735.421);
        _expectedResult.add(751.355);
        _expectedResult.add(767.635);
        _expectedResult.add(784.267);
        _expectedResult.add(801.259);
        _expectedResult.add(818.620);
        _expectedResult.add(836.356);
        _expectedResult.add(854.477);
        _expectedResult.add(872.991);
        _expectedResult.add(891.906);
        _expectedResult.add(911.231);
        _expectedResult.add(930.974);
        _expectedResult.add(951.145);
        _expectedResult.add(971.753);
        _expectedResult.add(992.808);
        _expectedResult.add(1014.319);
        _expectedResult.add(1036.296);
        _expectedResult.add(1058.749);
        _expectedResult.add(1081.688);
        _expectedResult.add(1105.125);
        _expectedResult.add(1129.069);
        _expectedResult.add(1153.532);
        _expectedResult.add(1178.525);
        _expectedResult.add(1204.060);
        _expectedResult.add(1230.148);
        _expectedResult.add(1256.801);
        _expectedResult.add(1284.032);
        _expectedResult.add(1311.853);
        _expectedResult.add(1340.276);
        _expectedResult.add(1369.316);
        _expectedResult.add(1398.984);
        _expectedResult.add(1429.295);
        _expectedResult.add(1460.263);
        _expectedResult.add(1491.902);
        _expectedResult.add(1524.227);
        _expectedResult.add(1557.252);
        _expectedResult.add(1590.992);
        _expectedResult.add(1625.464);
        _expectedResult.add(1660.682);
        _expectedResult.add(1696.664);
        _expectedResult.add(1733.425);
        _expectedResult.add(1770.982);
        _expectedResult.add(1809.354);
        _expectedResult.add(1848.556);
        _expectedResult.add(1888.608);
        _expectedResult.add(1929.528);
        _expectedResult.add(1971.335);
        _expectedResult.add(2014.047);
        _expectedResult.add(2057.685);
        _expectedResult.add(2102.268);
        _expectedResult.add(2147.817);
        _expectedResult.add(2194.353);
        _expectedResult.add(2241.897);
        _expectedResult.add(2290.472);
        _expectedResult.add(2340.099);
        _expectedResult.add(2390.801);
        _expectedResult.add(2442.601);
        _expectedResult.add(2495.524);
        _expectedResult.add(2549.594);
        _expectedResult.add(2604.835);
        _expectedResult.add(2661.273);
        _expectedResult.add(2718.934);
        _expectedResult.add(2777.845);
        _expectedResult.add(2838.031);
        _expectedResult.add(2899.522);
        _expectedResult.add(2962.345);
        _expectedResult.add(3026.529);
        _expectedResult.add(3092.104);
        _expectedResult.add(3159.099);
        _expectedResult.add(3227.546);
        _expectedResult.add(3297.477);
        _expectedResult.add(3368.922);
        _expectedResult.add(3441.915);
        _expectedResult.add(3516.490);
        _expectedResult.add(3592.681);
        _expectedResult.add(3670.522);
        _expectedResult.add(3750.050);
        _expectedResult.add(3831.301);
        _expectedResult.add(3914.313);
        _expectedResult.add(3999.123);
        _expectedResult.add(4085.771);
        _expectedResult.add(4174.296);
        _expectedResult.add(4264.739);
    }

    private double Round(double value, int preceision){
        double co = Math.pow(10,preceision);
        return (double)Math.round(value * co) / co;
    }

    @Test
    public void Rounding_test(){
        double rslt = Round(593.5315,3);

        Assert.assertEquals(593.532, rslt, 0.0);
    }

    @Test
    public void Rev_range_test(){
        //Arrange
        ArrayList<Pair<Integer,Integer>> testData = new ArrayList<Pair<Integer,Integer>>();
        testData.add(new Pair<Integer,Integer>(-1,EngineBlock.MIN_REV_RPM));
        testData.add(new Pair<Integer,Integer>(0,EngineBlock.MIN_REV_RPM));
        testData.add(new Pair<Integer,Integer>(50,3750));
        testData.add(new Pair<Integer,Integer>(110,EngineBlock.MAX_REV_RPM));


        for (int i = 0; i < testData.size(); i++) {
            Pair<Integer,Integer> data = testData.get(i);

            //Act
            double currentRev = _engineBlock.GetTartgetRev(data.getKey());
            _engineBlock.SetCurrentRev(currentRev);

            //Assert
            assertEquals((long)data.getValue(), (long)_engineBlock.GetCurrentRev());
            assertEquals((long)data.getValue()/60, (long)_engineBlock.GetRevOnePerSec());
        }
    }

    @Test
    public void From_500_to_6090()
    {
        //Arrange
        double rev = 500;

        for (int i = 0; i < _expectedResult.size(); i++)
        {
            //Act
            rev = _engineBlock.CalcNextPositiveRev(rev, 6090);

            //Assert
            assertEquals(_expectedResult.get(i), Round(rev, 3), 0.0);
        }
    }
    @Test
    public void From_6090_to_500()
    {
        //Arrange
        double startRev = 6090;
        double rev = 6090;
        for (int i = 0; i < _expectedResult.size(); i++)
        {
            //Act
            rev = _engineBlock.CalcNextNegativeRev(rev);
            double expectedRev = Math.max(startRev-(EngineBlock.OPTIMAL_STEPPING * (i+1)),EngineBlock.MIN_REV_RPM);

            //Assert
            assertEquals(expectedRev, rev, 0.0);
        }
    }
}